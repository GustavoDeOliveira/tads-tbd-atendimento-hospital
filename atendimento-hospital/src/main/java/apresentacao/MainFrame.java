/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package apresentacao;

import java.awt.Label;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.PopupFactory;
import javax.swing.Timer;
import negocio.Atendimento;
import negocio.Entidade;
import negocio.Funcionario;
import negocio.Paciente;
import negocio.Setor;

/**
 *
 * @author goliv
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form FuncionariosFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpAbas = new javax.swing.JTabbedPane();
        pAbaSetores = new javax.swing.JPanel();
        lTituloSetores = new javax.swing.JLabel();
        tfDescricaoSetor = new javax.swing.JTextField();
        lDescricaoSetor = new javax.swing.JLabel();
        bSalvarSetor = new javax.swing.JButton();
        spListagemSetores = new javax.swing.JScrollPane();
        liSetores = new javax.swing.JList<>();
        pAbaFuncionarios = new javax.swing.JPanel();
        lTituloFuncionarios = new javax.swing.JLabel();
        tfNomeFuncionario = new javax.swing.JTextField();
        tfEmailFuncionario = new javax.swing.JTextField();
        tfSenhaFuncionario = new javax.swing.JPasswordField();
        lNomeFuncionario = new javax.swing.JLabel();
        lEmailFuncionario = new javax.swing.JLabel();
        lSenhaFuncionario = new javax.swing.JLabel();
        bSalvarFuncionario = new javax.swing.JButton();
        cbSetorFuncionario = new javax.swing.JComboBox<>();
        lSetorFuncionario = new javax.swing.JLabel();
        spListagemFuncionarios = new javax.swing.JScrollPane();
        liFuncionarios = new javax.swing.JList<>();
        pAbaPacientes = new javax.swing.JPanel();
        lTituloPacientes = new javax.swing.JLabel();
        tfNomePaciente = new javax.swing.JTextField();
        tfEmailPaciente = new javax.swing.JTextField();
        lNomePaciente = new javax.swing.JLabel();
        lEmailPaciente = new javax.swing.JLabel();
        bSalvarPaciente = new javax.swing.JButton();
        spListagemPacientes = new javax.swing.JScrollPane();
        liPacientes = new javax.swing.JList<>();
        pAbaAtendimentos = new javax.swing.JPanel();
        lTituloAtendimentos = new javax.swing.JLabel();
        lFuncionarioAtendimento = new javax.swing.JLabel();
        cbFuncionarioAtendimento = new javax.swing.JComboBox<>();
        lObservacoesAtendimento = new javax.swing.JLabel();
        spObservacoesAtendimento = new javax.swing.JScrollPane();
        taObservacoesAtendimento = new javax.swing.JTextArea();
        lPacienteAtendimento = new javax.swing.JLabel();
        cbPacienteAtendimento = new javax.swing.JComboBox<>();
        lDiagnosticoAtendimento = new javax.swing.JLabel();
        tfDiagnosticoAtendimento = new javax.swing.JTextField();
        lDataHoraAtendimento = new javax.swing.JLabel();
        ftDataHoraAtendimento = new javax.swing.JFormattedTextField();
        bSalvarAtendimento = new javax.swing.JButton();
        spListagemAtendimentos = new javax.swing.JScrollPane();
        liAtendimentos = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tpAbas.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        pAbaSetores.setName(""); // NOI18N
        pAbaSetores.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pAbaSetoresComponentShown(evt);
            }
        });

        lTituloSetores.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 24)); // NOI18N
        lTituloSetores.setText("SETORES");

        tfDescricaoSetor.setFocusCycleRoot(true);

        lDescricaoSetor.setLabelFor(tfDescricaoSetor);
        lDescricaoSetor.setText("Descrição:");

        bSalvarSetor.setText("Cadastrar");
        bSalvarSetor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSalvarSetorActionPerformed(evt);
            }
        });

        spListagemSetores.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        liSetores.setModel(carregarListModelSetores());
        liSetores.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        liSetores.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                liSetoresValueChanged(evt);
            }
        });
        spListagemSetores.setViewportView(liSetores);

        javax.swing.GroupLayout pAbaSetoresLayout = new javax.swing.GroupLayout(pAbaSetores);
        pAbaSetores.setLayout(pAbaSetoresLayout);
        pAbaSetoresLayout.setHorizontalGroup(
            pAbaSetoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pAbaSetoresLayout.createSequentialGroup()
                .addComponent(lTituloSetores)
                .addGap(400, 768, Short.MAX_VALUE))
            .addGroup(pAbaSetoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pAbaSetoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spListagemSetores)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pAbaSetoresLayout.createSequentialGroup()
                        .addComponent(lDescricaoSetor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfDescricaoSetor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bSalvarSetor, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pAbaSetoresLayout.setVerticalGroup(
            pAbaSetoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAbaSetoresLayout.createSequentialGroup()
                .addComponent(lTituloSetores)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pAbaSetoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lDescricaoSetor)
                    .addComponent(tfDescricaoSetor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bSalvarSetor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spListagemSetores, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addContainerGap())
        );

        tpAbas.addTab("Setores", pAbaSetores);

        pAbaFuncionarios.setName(""); // NOI18N
        pAbaFuncionarios.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pAbaFuncionariosComponentShown(evt);
            }
        });

        lTituloFuncionarios.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 24)); // NOI18N
        lTituloFuncionarios.setText("FUNCIONÁRIOS");

        tfNomeFuncionario.setFocusCycleRoot(true);

        lNomeFuncionario.setLabelFor(tfNomeFuncionario);
        lNomeFuncionario.setText("Nome:");

        lEmailFuncionario.setLabelFor(tfEmailFuncionario);
        lEmailFuncionario.setText("Email:");

        lSenhaFuncionario.setLabelFor(tfSenhaFuncionario);
        lSenhaFuncionario.setText("Senha:");

        bSalvarFuncionario.setText("Cadastrar");
        bSalvarFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSalvarFuncionarioActionPerformed(evt);
            }
        });

        cbSetorFuncionario.setModel(carregarComboBoxModelSetores());

        lSetorFuncionario.setLabelFor(cbSetorFuncionario);
        lSetorFuncionario.setText("Setor:");

        spListagemFuncionarios.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        liFuncionarios.setModel(carregarListModelFuncionarios());
        liFuncionarios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        liFuncionarios.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                liFuncionariosValueChanged(evt);
            }
        });
        spListagemFuncionarios.setViewportView(liFuncionarios);

        javax.swing.GroupLayout pAbaFuncionariosLayout = new javax.swing.GroupLayout(pAbaFuncionarios);
        pAbaFuncionarios.setLayout(pAbaFuncionariosLayout);
        pAbaFuncionariosLayout.setHorizontalGroup(
            pAbaFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAbaFuncionariosLayout.createSequentialGroup()
                .addComponent(lTituloFuncionarios)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pAbaFuncionariosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pAbaFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spListagemFuncionarios)
                    .addGroup(pAbaFuncionariosLayout.createSequentialGroup()
                        .addGroup(pAbaFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lNomeFuncionario)
                            .addComponent(lEmailFuncionario))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pAbaFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfNomeFuncionario, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                            .addComponent(tfEmailFuncionario))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pAbaFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lSenhaFuncionario)
                            .addComponent(lSetorFuncionario))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pAbaFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pAbaFuncionariosLayout.createSequentialGroup()
                                .addComponent(cbSetorFuncionario, 0, 235, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bSalvarFuncionario))
                            .addComponent(tfSenhaFuncionario))))
                .addContainerGap())
        );
        pAbaFuncionariosLayout.setVerticalGroup(
            pAbaFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAbaFuncionariosLayout.createSequentialGroup()
                .addComponent(lTituloFuncionarios)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pAbaFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lNomeFuncionario)
                    .addComponent(tfNomeFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lSenhaFuncionario)
                    .addComponent(tfSenhaFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pAbaFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lEmailFuncionario)
                    .addComponent(tfEmailFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bSalvarFuncionario)
                    .addComponent(cbSetorFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lSetorFuncionario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spListagemFuncionarios, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
                .addContainerGap())
        );

        tpAbas.addTab("Funcionários", pAbaFuncionarios);

        pAbaPacientes.setName(""); // NOI18N
        pAbaPacientes.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pAbaPacientesComponentShown(evt);
            }
        });

        lTituloPacientes.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 24)); // NOI18N
        lTituloPacientes.setText("PACIENTES");

        tfNomePaciente.setFocusCycleRoot(true);

        lNomePaciente.setLabelFor(tfNomeFuncionario);
        lNomePaciente.setText("Nome:");

        lEmailPaciente.setLabelFor(tfEmailFuncionario);
        lEmailPaciente.setText("Email:");

        bSalvarPaciente.setText("Cadastrar");
        bSalvarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSalvarPacienteActionPerformed(evt);
            }
        });

        spListagemPacientes.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        liPacientes.setModel(carregarListModelPacientes());
        liPacientes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        liPacientes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                liPacientesValueChanged(evt);
            }
        });
        spListagemPacientes.setViewportView(liPacientes);

        javax.swing.GroupLayout pAbaPacientesLayout = new javax.swing.GroupLayout(pAbaPacientes);
        pAbaPacientes.setLayout(pAbaPacientesLayout);
        pAbaPacientesLayout.setHorizontalGroup(
            pAbaPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAbaPacientesLayout.createSequentialGroup()
                .addComponent(lTituloPacientes)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pAbaPacientesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pAbaPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pAbaPacientesLayout.createSequentialGroup()
                        .addGroup(pAbaPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lNomePaciente)
                            .addComponent(lEmailPaciente))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pAbaPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pAbaPacientesLayout.createSequentialGroup()
                                .addComponent(tfEmailPaciente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bSalvarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(tfNomePaciente)))
                    .addComponent(spListagemPacientes, javax.swing.GroupLayout.DEFAULT_SIZE, 852, Short.MAX_VALUE))
                .addContainerGap())
        );
        pAbaPacientesLayout.setVerticalGroup(
            pAbaPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAbaPacientesLayout.createSequentialGroup()
                .addComponent(lTituloPacientes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pAbaPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lNomePaciente)
                    .addComponent(tfNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pAbaPacientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lEmailPaciente)
                    .addComponent(tfEmailPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bSalvarPaciente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spListagemPacientes, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
                .addContainerGap())
        );

        tpAbas.addTab("Pacientes", pAbaPacientes);

        pAbaAtendimentos.setName(""); // NOI18N
        pAbaAtendimentos.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pAbaAtendimentosComponentShown(evt);
            }
        });

        lTituloAtendimentos.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 24)); // NOI18N
        lTituloAtendimentos.setText("ATENDIMENTOS");

        lFuncionarioAtendimento.setLabelFor(cbSetorFuncionario);
        lFuncionarioAtendimento.setText("Funcionario:");

        cbFuncionarioAtendimento.setModel(carregarComboBoxModelFuncionarios());

        lObservacoesAtendimento.setLabelFor(tfNomeFuncionario);
        lObservacoesAtendimento.setText("Observações");

        taObservacoesAtendimento.setColumns(20);
        taObservacoesAtendimento.setRows(5);
        spObservacoesAtendimento.setViewportView(taObservacoesAtendimento);

        lPacienteAtendimento.setLabelFor(cbSetorFuncionario);
        lPacienteAtendimento.setText("Paciente:");

        cbPacienteAtendimento.setModel(carregarComboBoxModelPacientes());

        lDiagnosticoAtendimento.setLabelFor(cbSetorFuncionario);
        lDiagnosticoAtendimento.setText("Diagnóstico:");

        lDataHoraAtendimento.setText("Data e Hora:");

        ftDataHoraAtendimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy HH:mm:ss"))));

        bSalvarAtendimento.setText("Cadastrar");
        bSalvarAtendimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSalvarAtendimentoActionPerformed(evt);
            }
        });

        spListagemAtendimentos.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        liAtendimentos.setModel(carregarListModelAtendimentos());
        liAtendimentos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        liAtendimentos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                liAtendimentosValueChanged(evt);
            }
        });
        spListagemAtendimentos.setViewportView(liAtendimentos);

        javax.swing.GroupLayout pAbaAtendimentosLayout = new javax.swing.GroupLayout(pAbaAtendimentos);
        pAbaAtendimentos.setLayout(pAbaAtendimentosLayout);
        pAbaAtendimentosLayout.setHorizontalGroup(
            pAbaAtendimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAbaAtendimentosLayout.createSequentialGroup()
                .addComponent(lTituloAtendimentos)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pAbaAtendimentosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pAbaAtendimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spListagemAtendimentos)
                    .addGroup(pAbaAtendimentosLayout.createSequentialGroup()
                        .addGroup(pAbaAtendimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pAbaAtendimentosLayout.createSequentialGroup()
                                .addComponent(lFuncionarioAtendimento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbFuncionarioAtendimento, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pAbaAtendimentosLayout.createSequentialGroup()
                                .addComponent(lObservacoesAtendimento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spObservacoesAtendimento)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addGroup(pAbaAtendimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lDataHoraAtendimento)
                            .addComponent(lPacienteAtendimento)
                            .addComponent(lDiagnosticoAtendimento))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pAbaAtendimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cbPacienteAtendimento, javax.swing.GroupLayout.Alignment.LEADING, 0, 340, Short.MAX_VALUE)
                            .addComponent(tfDiagnosticoAtendimento, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pAbaAtendimentosLayout.createSequentialGroup()
                                .addComponent(ftDataHoraAtendimento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bSalvarAtendimento)))))
                .addContainerGap())
        );
        pAbaAtendimentosLayout.setVerticalGroup(
            pAbaAtendimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAbaAtendimentosLayout.createSequentialGroup()
                .addComponent(lTituloAtendimentos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pAbaAtendimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lFuncionarioAtendimento)
                    .addComponent(cbFuncionarioAtendimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lPacienteAtendimento)
                    .addComponent(cbPacienteAtendimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pAbaAtendimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lObservacoesAtendimento)
                    .addGroup(pAbaAtendimentosLayout.createSequentialGroup()
                        .addGroup(pAbaAtendimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDiagnosticoAtendimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lDiagnosticoAtendimento))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pAbaAtendimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bSalvarAtendimento)
                            .addComponent(lDataHoraAtendimento)
                            .addComponent(ftDataHoraAtendimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(spObservacoesAtendimento, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spListagemAtendimentos, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                .addContainerGap())
        );

        tpAbas.addTab("Atendimentos", pAbaAtendimentos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tpAbas)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tpAbas)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bSalvarSetorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSalvarSetorActionPerformed
        if ("".equals(tfDescricaoSetor.getText())) {
            return;
        }

        var setor = liSetores.getSelectedValue();
        if (setor == null) {
            liSetores.setSelectedIndex(0);
            setor = liSetores.getSelectedValue();
        }
        setor.setDescricao(tfDescricaoSetor.getText());
        
        EntityManager em = entityManagerFactory.createEntityManager();
        em.getTransaction().begin();
        salvar(setor, em);
        em.getTransaction().commit();
        em.close();

        tfDescricaoSetor.setText("");

        popup("Setor salvo com sucesso.");

        atualizarSetores();
    }//GEN-LAST:event_bSalvarSetorActionPerformed

    private void liSetoresValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_liSetoresValueChanged
        var setor = liSetores.getSelectedValue();
        if (setor == null || setor.getId() == 0) {
            tfDescricaoSetor.setText("");
            bSalvarSetor.setText("Cadastrar");
        } else {
            tfDescricaoSetor.setText(setor.getDescricao());
            bSalvarSetor.setText("Atualizar");
        }
    }//GEN-LAST:event_liSetoresValueChanged

    private void bSalvarFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSalvarFuncionarioActionPerformed
        if ("".equals(tfNomeFuncionario.getText())
            || "".equals(tfEmailFuncionario.getText())
            || tfSenhaFuncionario.getPassword().length == 0
            || cbSetorFuncionario.getSelectedIndex() < 0) {
            return;
        }

        var funcionario = liFuncionarios.getSelectedValue();
        if (funcionario == null) {
            liFuncionarios.setSelectedIndex(0);
            funcionario = liFuncionarios.getSelectedValue();
        }
        funcionario.setNome(tfNomeFuncionario.getText());
        funcionario.setEmail(tfEmailFuncionario.getText());
        funcionario.setSenha(new String(tfSenhaFuncionario.getPassword()));
        
        var setor = cbSetorFuncionario.getItemAt(cbSetorFuncionario.getSelectedIndex());
        funcionario.setSetor(setor);
        setor.getFuncionarios().add(funcionario);
        
        EntityManager em = entityManagerFactory.createEntityManager();
        em.getTransaction().begin();
        salvar(funcionario, em);
        salvar(setor, em);
        em.getTransaction().commit();
        em.close();

        liFuncionarios.setSelectedIndex(0);

        popup("Funcionario salvo com sucesso.");

        atualizarFuncionarios();
    }//GEN-LAST:event_bSalvarFuncionarioActionPerformed

    private void liFuncionariosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_liFuncionariosValueChanged
        var funcionario = liFuncionarios.getSelectedValue();
        if (funcionario == null || funcionario.getId() == 0) {
            tfNomeFuncionario.setText("");
            tfEmailFuncionario.setText("");
            tfSenhaFuncionario.setText("");
            cbSetorFuncionario.setSelectedIndex(-1);
            bSalvarFuncionario.setText("Cadastrar");
        } else {
            tfNomeFuncionario.setText(funcionario.getNome());
            tfEmailFuncionario.setText(funcionario.getEmail());
            tfSenhaFuncionario.setText(funcionario.getSenha());
            cbSetorFuncionario.setSelectedItem(_setores.get(_setores.indexOf(funcionario.getSetor())));
            bSalvarFuncionario.setText("Atualizar");
        }
    }//GEN-LAST:event_liFuncionariosValueChanged

    private void pAbaFuncionariosComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pAbaFuncionariosComponentShown
        atualizarFuncionarios();
    }//GEN-LAST:event_pAbaFuncionariosComponentShown

    private void pAbaSetoresComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pAbaSetoresComponentShown
        atualizarSetores();
    }//GEN-LAST:event_pAbaSetoresComponentShown

    private void bSalvarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSalvarPacienteActionPerformed
        if ("".equals(tfNomePaciente.getText())
            || "".equals(tfEmailPaciente.getText())) {
            return;
        }

        var paciente = liPacientes.getSelectedValue();
        if (paciente == null) {
            liPacientes.setSelectedIndex(0);
            paciente = liPacientes.getSelectedValue();
        }
        paciente.setNome(tfNomePaciente.getText());
        paciente.setEmail(tfEmailPaciente.getText());
        
        EntityManager em = entityManagerFactory.createEntityManager();
        em.getTransaction().begin();
        salvar(paciente, em);
        em.getTransaction().commit();
        em.close();

        tfNomePaciente.setText("");
        tfEmailPaciente.setText("");

        popup("Paciente salvo com sucesso.");

        atualizarPacientes();
    }//GEN-LAST:event_bSalvarPacienteActionPerformed

    private void liPacientesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_liPacientesValueChanged
        var funcionario = liPacientes.getSelectedValue();
        if (funcionario == null || funcionario.getId() == 0) {
            tfNomePaciente.setText("");
            tfEmailPaciente.setText("");
            bSalvarPaciente.setText("Cadastrar");
        } else {
            tfNomePaciente.setText(funcionario.getNome());
            tfEmailPaciente.setText(funcionario.getEmail());
            bSalvarPaciente.setText("Atualizar");
        }
    }//GEN-LAST:event_liPacientesValueChanged

    private void pAbaPacientesComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pAbaPacientesComponentShown
        atualizarPacientes();
    }//GEN-LAST:event_pAbaPacientesComponentShown

    private void bSalvarAtendimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSalvarAtendimentoActionPerformed
        if ("".equals(tfDiagnosticoAtendimento.getText())
            || "".equals(taObservacoesAtendimento.getText())
            || "".equals(ftDataHoraAtendimento.getText())
            || cbFuncionarioAtendimento.getSelectedIndex() < 0
            || cbPacienteAtendimento.getSelectedIndex() < 0) {
            return;
        }

        var atendimento = liAtendimentos.getSelectedValue();
        if (atendimento == null) {
            liAtendimentos.setSelectedIndex(0);
            atendimento = liAtendimentos.getSelectedValue();
        }
        try {
            atendimento.setData(new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").parse(ftDataHoraAtendimento.getText()));
        } catch (ParseException ex) {
            System.err.println(ex.getMessage());
            System.err.println(Arrays.toString(ex.getStackTrace()));
        }
        atendimento.setDiagnostico(tfDiagnosticoAtendimento.getText());
        atendimento.setObservacoes(taObservacoesAtendimento.getText());
        var paciente = cbPacienteAtendimento.getItemAt(cbPacienteAtendimento.getSelectedIndex());
        atendimento.setPaciente(paciente);
        paciente.getAtendimentos().add(atendimento);
        var funcionario = cbFuncionarioAtendimento.getItemAt(cbFuncionarioAtendimento.getSelectedIndex());
        atendimento.setFuncionario(funcionario);
        funcionario.getAtendimentos().add(atendimento);
        
        EntityManager em = entityManagerFactory.createEntityManager();
        em.getTransaction().begin();
        salvar(atendimento, em);
        salvar(paciente, em);
        salvar(funcionario, em);
        em.getTransaction().commit();
        em.close();

        tfNomePaciente.setText("");
        tfEmailPaciente.setText("");

        popup("Paciente salvo com sucesso.");

        atualizarAtendimentos();
    }//GEN-LAST:event_bSalvarAtendimentoActionPerformed

    private void liAtendimentosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_liAtendimentosValueChanged
        var atendimento = liAtendimentos.getSelectedValue();
        if (atendimento == null || atendimento.getId() == 0) {
            ftDataHoraAtendimento.setText("");
            tfDiagnosticoAtendimento.setText("");
            taObservacoesAtendimento.setText("");
            cbFuncionarioAtendimento.setSelectedIndex(-1);
            cbPacienteAtendimento.setSelectedIndex(-1);
            bSalvarAtendimento.setText("Cadastrar");
        } else {
            ftDataHoraAtendimento.setText(new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(atendimento.getData()));
            tfDiagnosticoAtendimento.setText(atendimento.getDiagnostico());
            taObservacoesAtendimento.setText(atendimento.getObservacoes());
            cbFuncionarioAtendimento.setSelectedItem(_funcionarios.get(_funcionarios.indexOf(atendimento.getFuncionario())));
            cbPacienteAtendimento.setSelectedItem(_pacientes.get(_pacientes.indexOf(atendimento.getPaciente())));
            bSalvarPaciente.setText("Atualizar");
        }
    }//GEN-LAST:event_liAtendimentosValueChanged

    private void pAbaAtendimentosComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pAbaAtendimentosComponentShown
        atualizarAtendimentos();
        atualizarFuncionarios();
        atualizarPacientes();
    }//GEN-LAST:event_pAbaAtendimentosComponentShown

    private static final EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("AtendimentoHospitalPU");

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    private void popup(String texto) {
        var popupFactory = PopupFactory.getSharedInstance();
        var popup = popupFactory.getPopup(this, new Label(texto), this.getX(), this.getY());
        popup.show();
        Timer timer = new Timer(3000, e -> popup.hide());
        timer.start();
    }

    private <T extends Entidade> void salvar(T entidade, EntityManager em) {
        if (entidade.getId() != 0) {
            em.merge(entidade);
        } else {
            em.persist(entidade);
        }
    }

    private void carregarSetores() {
        EntityManager em = entityManagerFactory.createEntityManager();
        _setores = em.createQuery("SELECT s FROM Setor s").getResultList();
        em.close();
    }

    private void atualizarSetores() {
        carregarSetores();
        liSetores.setModel(carregarListModelSetores());
        cbSetorFuncionario.setModel(carregarComboBoxModelSetores());
        liSetores.setSelectedIndex(0);
    }

    private ListModel<Setor> carregarListModelSetores() {
        var listModel = new DefaultListModel<Setor>();
        listModel.add(0, new Setor("-NOVO SETOR-"));
        listModel.addAll(_setores);
        return listModel;
    }

    private ComboBoxModel<Setor> carregarComboBoxModelSetores() {
        var comboBoxModel = new DefaultComboBoxModel<Setor>();
        comboBoxModel.addAll(_setores);
        return comboBoxModel;
    }

    private void carregarFuncionarios() {
        EntityManager em = entityManagerFactory.createEntityManager();
        _funcionarios = em.createQuery("SELECT f FROM Funcionario f").getResultList();
        em.close();
    }

    private void atualizarFuncionarios() {
        carregarFuncionarios();
        liFuncionarios.setModel(carregarListModelFuncionarios());
        liFuncionarios.setSelectedIndex(0);
        cbFuncionarioAtendimento.setModel(carregarComboBoxModelFuncionarios());
        cbFuncionarioAtendimento.setSelectedIndex(0);
    }

    private ListModel<Funcionario> carregarListModelFuncionarios() {
        var listModel = new DefaultListModel<Funcionario>();
        listModel.add(0, new Funcionario("-NOVO FUNCIONÁRIO-", "", ""));
        listModel.addAll(_funcionarios);
        return listModel;
    }

    private ComboBoxModel<Funcionario> carregarComboBoxModelFuncionarios() {
        var comboBoxModel = new DefaultComboBoxModel<Funcionario>();
        comboBoxModel.addAll(_funcionarios);
        return comboBoxModel;
    }

    private void carregarPacientes() {
        EntityManager em = entityManagerFactory.createEntityManager();
        _pacientes = em.createQuery("SELECT p FROM Paciente p").getResultList();
        em.close();
    }

    private void atualizarPacientes() {
        carregarPacientes();
        liPacientes.setModel(carregarListModelPacientes());
        liPacientes.setSelectedIndex(0);
        cbPacienteAtendimento.setModel(carregarComboBoxModelPacientes());
        cbPacienteAtendimento.setSelectedIndex(0);
    }

    private ListModel<Paciente> carregarListModelPacientes() {
        var listModel = new DefaultListModel<Paciente>();
        listModel.add(0, new Paciente("-NOVO PACIENTE-", ""));
        listModel.addAll(_pacientes);
        return listModel;
    }

    private ComboBoxModel<Paciente> carregarComboBoxModelPacientes() {
        var comboBoxModel = new DefaultComboBoxModel<Paciente>();
        comboBoxModel.addAll(_pacientes);
        return comboBoxModel;
    }
    
    private void carregarAtendimentos() {
        EntityManager em = entityManagerFactory.createEntityManager();
        _atendimentos = em.createQuery("SELECT a FROM Atendimento a").getResultList();
        em.close();
    }

    private void atualizarAtendimentos() {
        carregarAtendimentos();
        liAtendimentos.setModel(carregarListModelAtendimentos());
        liAtendimentos.setSelectedIndex(0);
    }

    private ListModel<Atendimento> carregarListModelAtendimentos() {
        var listModel = new DefaultListModel<Atendimento>();
        listModel.add(0, new Atendimento("-NOVO ATENDIMENTO-"));
        listModel.addAll(_atendimentos);
        return listModel;
    }

    private List<Setor> _setores = new ArrayList<>(1);
    private List<Funcionario> _funcionarios = new ArrayList<>(1);
    private List<Paciente> _pacientes = new ArrayList<>(1);
    private List<Atendimento> _atendimentos = new ArrayList<>(1);

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bSalvarAtendimento;
    private javax.swing.JButton bSalvarFuncionario;
    private javax.swing.JButton bSalvarPaciente;
    private javax.swing.JButton bSalvarSetor;
    private javax.swing.JComboBox<Funcionario> cbFuncionarioAtendimento;
    private javax.swing.JComboBox<Paciente> cbPacienteAtendimento;
    private javax.swing.JComboBox<Setor> cbSetorFuncionario;
    private javax.swing.JFormattedTextField ftDataHoraAtendimento;
    private javax.swing.JLabel lDataHoraAtendimento;
    private javax.swing.JLabel lDescricaoSetor;
    private javax.swing.JLabel lDiagnosticoAtendimento;
    private javax.swing.JLabel lEmailFuncionario;
    private javax.swing.JLabel lEmailPaciente;
    private javax.swing.JLabel lFuncionarioAtendimento;
    private javax.swing.JLabel lNomeFuncionario;
    private javax.swing.JLabel lNomePaciente;
    private javax.swing.JLabel lObservacoesAtendimento;
    private javax.swing.JLabel lPacienteAtendimento;
    private javax.swing.JLabel lSenhaFuncionario;
    private javax.swing.JLabel lSetorFuncionario;
    private javax.swing.JLabel lTituloAtendimentos;
    private javax.swing.JLabel lTituloFuncionarios;
    private javax.swing.JLabel lTituloPacientes;
    private javax.swing.JLabel lTituloSetores;
    private javax.swing.JList<Atendimento> liAtendimentos;
    private javax.swing.JList<Funcionario> liFuncionarios;
    private javax.swing.JList<Paciente> liPacientes;
    private javax.swing.JList<Setor> liSetores;
    private javax.swing.JPanel pAbaAtendimentos;
    private javax.swing.JPanel pAbaFuncionarios;
    private javax.swing.JPanel pAbaPacientes;
    private javax.swing.JPanel pAbaSetores;
    private javax.swing.JScrollPane spListagemAtendimentos;
    private javax.swing.JScrollPane spListagemFuncionarios;
    private javax.swing.JScrollPane spListagemPacientes;
    private javax.swing.JScrollPane spListagemSetores;
    private javax.swing.JScrollPane spObservacoesAtendimento;
    private javax.swing.JTextArea taObservacoesAtendimento;
    private javax.swing.JTextField tfDescricaoSetor;
    private javax.swing.JTextField tfDiagnosticoAtendimento;
    private javax.swing.JTextField tfEmailFuncionario;
    private javax.swing.JTextField tfEmailPaciente;
    private javax.swing.JTextField tfNomeFuncionario;
    private javax.swing.JTextField tfNomePaciente;
    private javax.swing.JPasswordField tfSenhaFuncionario;
    private javax.swing.JTabbedPane tpAbas;
    // End of variables declaration//GEN-END:variables
}
